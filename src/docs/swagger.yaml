openapi: 3.0.3
info:
  title: Yum-Gott Platform API
  description: API for the Yum-Gott platform, supporting customer and restaurant owner authentication, profile management, product management, and category management.
  version: 1.0.0

servers:
  - url: http://localhost:3000
    description: Local development server
  - url: https://yum-gott.onrender.com
    description: Production server

paths:
  /health:
    get:
      tags:
        - Health Check
      summary: Health check endpoint
      description: Check if the API server is running and healthy
      operationId: checkHealth
      responses:
        "200":
          description: Server is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-06-22T18:46:00Z"
                  uptime:
                    type: number
                    description: Server uptime in seconds
                    example: 3600.5

  /api/auth/register/customer:
    post:
      tags:
        - Authentication
      summary: Register a new customer
      description: Initiates customer registration by storing details and sending a verification email.
      operationId: registerCustomer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterCustomerRequest"
            examples:
              validCustomer:
                summary: Valid customer registration
                value:
                  name: "Ahmed Mohamed"
                  email: "ahmed@example.com"
                  mobileNumber: "01234567890"
                  password: "SecurePass123"
      responses:
        "201":
          description: Customer registration initiated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Registration successful. Please check your email for verification link."
          headers:
            Set-Cookie:
              schema:
                type: string
                example: accessToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; HttpOnly; Secure; SameSite=Strict; Path=/; Max-Age=86400
        "400":
          $ref: "#/components/responses/BadRequestError"

  /api/auth/register/restaurant-owner:
    post:
      tags:
        - Authentication
      summary: Register a new restaurant owner
      description: Initiates restaurant owner registration by storing details and sending a verification email.
      operationId: registerRestaurantOwner
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRestaurantOwnerRequest"
            examples:
              validOwner:
                summary: Valid restaurant owner registration
                value:
                  restaurantName: "Tasty Bites"
                  organizationNumber: "ORG123456"
                  email: "owner@example.com"
                  mobileNumber: "09876543210"
                  password: "SecurePass123"
      responses:
        "201":
          description: Restaurant owner registration initiated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Restaurant owner registration successful. Please check your email for verification link."
          headers:
            Set-Cookie:
              schema:
                type: string
                example: accessToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; HttpOnly; Secure; SameSite=Strict; Path=/; Max-Age=86400
        "400":
          $ref: "#/components/responses/BadRequestError"

  /api/auth/verify:
    get:
      tags:
        - Authentication
      summary: Verify email address
      description: Verifies a user's email using a token sent in the verification email.
      operationId: verifyEmail
      parameters:
        - in: query
          name: token
          schema:
            type: string
            format: uuid
          required: true
          description: Verification token sent to the user's email
          example: 550e8400-e29b-41d4-a716-446655440000
      responses:
        "200":
          description: Email verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Email verified successfully. You can now login."
                  data:
                    type: object
                    properties:
                      user:
                        oneOf:
                          - $ref: "#/components/schemas/CustomerResponse"
                          - $ref: "#/components/schemas/RestaurantOwnerResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"

  /api/auth/login/customer:
    post:
      tags:
        - Authentication
      summary: Customer login
      description: Authenticate a customer using email and password. Returns JWT tokens as HTTP-only cookies.
      operationId: loginCustomer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
            examples:
              loginWithEmail:
                summary: Login with email
                value:
                  email: "ahmed@example.com"
                  password: "SecurePass123"
      responses:
        "200":
          description: Customer login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Customer login successful"
          headers:
            Set-Cookie:
              schema:
                type: string
                example: accessToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; HttpOnly; Secure; SameSite=Strict; Path=/; Max-Age=86400
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "429":
          $ref: "#/components/responses/TooManyRequestsError"

  /api/auth/login/restaurant-owner:
    post:
      tags:
        - Authentication
      summary: Restaurant owner login
      description: Authenticate a restaurant owner using email and password. Returns JWT tokens as HTTP-only cookies.
      operationId: loginRestaurantOwner
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
            examples:
              loginWithEmail:
                summary: Login with email
                value:
                  email: "owner@example.com"
                  password: "SecurePass123"
      responses:
        "200":
          description: Restaurant owner login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Restaurant owner login successful"
          headers:
            Set-Cookie:
              schema:
                type: string
                example: accessToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; HttpOnly; Secure; SameSite=Strict; Path=/; Max-Age=86400
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "429":
          $ref: "#/components/responses/TooManyRequestsError"

  /api/auth/profile/restaurant-owner:
    get:
      tags:
        - Authentication
      summary: Get restaurant owner profile
      description: Retrieve the restaurant name and profile image URL for the authenticated restaurant owner
      operationId: getRestaurantOwnerProfile
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Restaurant owner profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      restaurantName:
                        type: string
                        example: "Gourmet Delight"
                      profileImageUrl:
                        type: string
                        nullable: true
                        example: "https://yum-gott-profile-images.s3.us-east-1.amazonaws.com/restaurant_owner/123.jpg"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"

  /api/auth/profile/image:
    post:
      tags:
        - Authentication
      summary: Upload profile image
      description: Allows authenticated customers or restaurant owners to upload a profile image, stored in AWS S3.
      operationId: uploadProfileImage
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                profileImage:
                  type: string
                  format: binary
              required:
                - profileImage
      responses:
        "200":
          description: Profile image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Profile image uploaded successfully"
                  data:
                    type: object
                    properties:
                      profileImageUrl:
                        type: string
                        example: "https://yum-gott-profile-images.s3.us-east-1.amazonaws.com/customer/123.jpg"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"

  /api/auth/location/restaurant:
    post:
      tags:
        - Authentication
      summary: Update restaurant location
      description: Allows authenticated restaurant owners to update their restaurant's address and coordinates.
      operationId: updateRestaurantLocation
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateRestaurantLocationRequest"
      responses:
        "200":
          description: Restaurant location updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Restaurant location updated successfully"
                  data:
                    type: object
                    properties:
                      address:
                        type: string
                        example: "123 Food Street, City"
                      latitude:
                        type: number
                        example: 40.7128
                      longitude:
                        type: number
                        example: -74.0060
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"

  /api/auth/refresh-token:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: |
        Refreshes the access token using the refresh token provided in the HTTP-only cookie.
        This endpoint should be called when the access token is expired or about to expire.
        The request must include the `refreshToken` and `accessToken` cookies.
      operationId: refreshToken
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Token refreshed successfully. New tokens are set in HTTP-only cookies.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Token refreshed successfully"
          headers:
            Set-Cookie:
              schema:
                type: string
                example: accessToken=...; refreshToken=...;
        "401":
          description: Unauthorized. The refresh token is invalid, expired, or not provided.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Invalid or expired refresh token"

  /api/auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      description: Invalidates the refresh token and clears authentication cookies.
      operationId: logout
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Logout successful"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /api/products:
    post:
      tags:
        - Products
      summary: Create a new product
      description: Creates a new product for a restaurant owner.
      operationId: createProduct
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                categoryName:
                  type: string
                  description: Name of the existing category.
                  example: "Main Course"
                newCategoryName:
                  type: string
                  description: Name of the new category to create (optional; if provided, will be used instead of categoryName)
                  example: ""
                productName:
                  type: string
                  description: Name of the product
                  example: "Margherita Pizza"
                description:
                  type: string
                  description: Product description
                  example: "Classic pizza with tomato sauce and mozzarella"
                price:
                  type: number
                  description: Base price of the product
                  example: 100
                discount:
                  type: number
                  description: Discount percentage
                  example: 10
                sizeOptions:
                  type: object
                  description: Optional array of size options. In multipart/form-data, must be a JSON string (e.g., '[{"name":"Medium","additionalPrice":50},{"name":"Large","additionalPrice":70}]').
                  example: '[{"name":"Medium","additionalPrice":50},{"name":"Large","additionalPrice":70}]'
                image:
                  type: string
                  format: binary
                  description: Product image file (JPEG or PNG)
              required:
                - categoryName
                - productName
                - description
                - price
                - image
      responses:
        "201":
          description: Product created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Product created successfully"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Invalid input"

  /api/products/restaurant:
    get:
      tags:
        - Products
      summary: Get all products for a restaurant
      description: Retrieves all products belonging to the authenticated restaurant owner.
      operationId: getProductsByRestaurant
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Get All Products successfully"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ProductResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"

  /api/products/{id}:
    get:
      tags:
        - Products
      summary: Get a product by ID
      description: Retrieves a specific product by its ID.
      operationId: getProduct
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: The ID of the product to retrieve
          example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        "200":
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Get Product successfully"
                  data:
                    $ref: "#/components/schemas/ProductResponse"
        "404":
          $ref: "#/components/responses/NotFoundError"

    put:
      tags:
        - Products
      summary: Update a product
      description: Updates an existing product for a restaurant owner.
      operationId: updateProduct
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                categoryName:
                  type: string
                  description: Name of the category. If the category does not exist, it will be created automatically.
                  example: "Main Course"
                newCategoryName:
                  type: string
                  description: Name of the new category to create (optional; if provided, will be used instead of categoryName)
                  example: ""
                productName:
                  type: string
                  description: Name of the product
                  example: "Margherita Pizza"
                description:
                  type: string
                  description: Product description
                  example: "Classic pizza with tomato sauce and mozzarella"
                price:
                  type: number
                  description: Base price of the product
                  example: 100
                discount:
                  type: number
                  description: Discount percentage
                  example: 10
                sizeOptions:
                  type: object
                  description: Optional array of size options. In multipart/form-data, must be a JSON string (e.g., '[{"name":"Medium","additionalPrice":50},{"name":"Large","additionalPrice":70}]').
                  example: '[{"name":"Medium","additionalPrice":50},{"name":"Large","additionalPrice":70}]'
                image:
                  type: string
                  format: binary
                  description: Product image file (JPEG or PNG)
      responses:
        "200":
          description: Product updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Product updated successfully"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Invalid input"

    delete:
      tags:
        - Products
      summary: Delete a product
      description: Allows authenticated restaurant owners to delete a product.
      operationId: deleteProduct
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: The ID of the product to delete
          example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        "200":
          description: Product deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Product deleted successfully"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /api/products/{productId}/options:
    post:
      tags:
        - Product Options
      summary: Create a product option
      description: Allows authenticated restaurant owners to create a new option for a product.
      operationId: createProductOption
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: productId
          schema:
            type: string
            format: uuid
          required: true
          description: The ID of the product to add an option to
          example: "550e8400-e29b-41d4-a716-446655440000"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Toppings"
              required:
                - name
      responses:
        "201":
          description: Product option created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Product option created successfully"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"

    get:
      tags:
        - Product Options
      summary: Get product options
      description: Retrieves all options and their values for a specific product.
      operationId: getProductOptions
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: productId
          schema:
            type: string
            format: uuid
          required: true
          description: The ID of the product to retrieve options for
          example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        "200":
          description: Product options retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Product options retrieved successfully"
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          example: "Toppings"
                        values:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                example: "Extra Cheese"
                              additionalPrice:
                                type: number
                                example: 2.50
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"

  /api/products/options/{optionId}/values:
    post:
      tags:
        - Product Options
      summary: Create a product option value
      description: Allows authenticated restaurant owners to create a new value for a product option.
      operationId: createProductOptionValue
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: optionId
          schema:
            type: string
            format: uuid
          required: true
          description: The ID of the option to add a value to
          example: "550e8400-e29b-41d4-a716-446655440000"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Extra Cheese"
                additionalPrice:
                  type: number
                  example: 2.50
              required:
                - name
      responses:
        "201":
          description: Product option value created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Product option value created successfully"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"

  /api/products/options/{optionId}:
    delete:
      tags:
        - Product Options
      summary: Delete a product option
      description: Allows authenticated restaurant owners to delete a product option and its associated values.
      operationId: deleteProductOption
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: optionId
          schema:
            type: string
            format: uuid
          required: true
          description: The ID of the option to delete
          example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        "200":
          description: Product option deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Product option deleted successfully"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"

  /api/products/option-values/{valueId}:
    delete:
      tags:
        - Product Options
      summary: Delete a product option value
      description: Allows authenticated restaurant owners to delete a product option value.
      operationId: deleteProductOptionValue
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: valueId
          schema:
            type: string
            format: uuid
          required: true
          description: The ID of the option value to delete
          example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        "200":
          description: Product option value deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Product option value deleted successfully"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"

  /api/categories:
    post:
      tags:
        - Categories
      summary: Create a new category
      description: Allows restaurant owners to create a new category for their products.
      operationId: createCategory
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  maxLength: 100
                  example: "Main Course"
      responses:
        "201":
          description: Category created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Category created successfully"
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        example: "550e8400-e29b-41d4-a716-446655440000"
                      name:
                        type: string
                        example: "Main Course"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"

  /api/categories/restaurant:
    get:
      tags:
        - Categories
      summary: Get all categories for a restaurant
      description: Retrieves all categories belonging to the authenticated restaurant owner.
      operationId: getCategoriesByRestaurant
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Categories retrieved successfully"
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                          example: "550e8400-e29b-41d4-a716-446655440000"
                        name:
                          type: string
                          example: "Main Course"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"

components:
  schemas:
    RegisterCustomerRequest:
      type: object
      properties:
        name:
          type: string
          example: "Ahmed Mohamed"
          maxLength: 100
        email:
          type: string
          format: email
          example: "ahmed@example.com"
          maxLength: 255
        mobileNumber:
          type: string
          example: "01234567890"
          pattern: '^[0-9]{10,15}$'
        password:
          type: string
          example: "SecurePass123"
          minLength: 6
          maxLength: 100
      required:
        - name
        - email
        - mobileNumber
        - password

    RegisterRestaurantOwnerRequest:
      type: object
      properties:
        restaurantName:
          type: string
          example: "Tasty Bites"
          maxLength: 255
        organizationNumber:
          type: string
          example: "ORG123456"
          pattern: '^[A-Z0-9]+$'
          minLength: 5
          maxLength: 50
        email:
          type: string
          format: email
          example: "owner@example.com"
          maxLength: 255
        mobileNumber:
          type: string
          example: "09876543210"
          pattern: '^[0-9]{10,15}$'
        password:
          type: string
          example: "SecurePass123"
          minLength: 6
          maxLength: 100
      required:
        - restaurantName
        - organizationNumber
        - email
        - mobileNumber
        - password

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
          maxLength: 255
        password:
          type: string
          example: "SecurePass123"
          minLength: 6
      required:
        - password
      oneOf:
        - required: [email]

    CustomerResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        name:
          type: string
          example: "Ahmed Mohamed"
        email:
          type: string
          example: "ahmed@example.com"
        mobileNumber:
          type: string
          example: "01234567890"
        isActive:
          type: boolean
          example: true
        isEmailVerified:
          type: boolean
          example: true
        profileImageUrl:
          type: string
          nullable: true
          example: "https://yum-gott-profile-images.s3.us-east-1.amazonaws.com/customer/123.jpg"

    RestaurantOwnerResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        restaurantName:
          type: string
          example: "Tasty Bites"
        organizationNumber:
          type: string
          example: "ORG123456"
        email:
          type: string
          example: "owner@example.com"
        mobileNumber:
          type: string
          example: "09876543210"
        isActive:
          type: boolean
          example: true
        isEmailVerified:
          type: boolean
          example: true
        profileImageUrl:
          type: string
          nullable: true
          example: "https://yum-gott-profile-images.s3.us-east-1.amazonaws.com/restaurant_owner/123.jpg"
        address:
          type: string
          nullable: true
          example: "123 Food Street, City"
        latitude:
          type: number
          nullable: true
          example: 40.7128
        longitude:
          type: number
          nullable: true
          example: -74.0060

    UpdateRestaurantLocationRequest:
      type: object
      properties:
        address:
          type: string
          example: "123 Food Street, City"
          maxLength: 255
        latitude:
          type: number
          example: 40.7128
        longitude:
          type: number
          example: -74.0060
      required:
        - address
        - latitude
        - longitude

    ProductResponse:
      type: object
      properties:
        categoryName:
          type: string
          example: "Pizza"
        productName:
          type: string
          example: "Margherita Pizza"
        description:
          type: string
          example: "Classic pizza with tomato sauce and mozzarella"
        price:
          type: number
          example: 12.99
        discount:
          type: number
          example: 10
        addSize:
          type: string
          enum: [Small, Medium, Large]
          example: "Medium"
        imageUrl:
          type: string
          nullable: true
          example: "https://yum-gott-product-images.s3.us-east-1.amazonaws.com/product/123.jpg"

  responses:
    BadRequestError:
      description: Bad request due to invalid input
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: "Validation failed"
              errors:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                      example: "email"
                    message:
                      type: string
                      example: "Invalid email format"
                    value:
                      type: string
                      nullable: true
                      example: "invalid.email"

    UnauthorizedError:
      description: Unauthorized access
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: "Invalid or expired token"

    ForbiddenError:
      description: Forbidden access
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: "Forbidden: Only restaurant owners can access this endpoint"

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: "Product not found"

    TooManyRequestsError:
      description: Too many requests
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: "Too many login attempts, please try again later"

  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: accessToken