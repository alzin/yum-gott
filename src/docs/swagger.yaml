openapi: 3.0.3
info:
  title: Yum-Gott Platform API
  description: 'API for the Yum-Gott platform, supporting customer and restaurant owner authentication, profile management, product management, and category management.'
  version: 1.0.0
servers:
  - url: 'http://localhost:3000'
    description: Local development server
  - url: 'https://production-server-yumgott-30534781840.europe-west1.run.app'
    description: Production server
  - url: 'https://yum-gott.onrender.com'
    description: Development server
paths:
  /health:
    get:
      tags:
        - Health Check
      summary: Health check endpoint
      description: Check if the API server is running and healthy
      operationId: checkHealth
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK
                  timestamp:
                    type: string
                    format: date-time
                    example: '2025-06-22T18:46:00Z'
                  uptime:
                    type: number
                    description: Server uptime in seconds
                    example: 3600.5
  /api/auth/register/customer:
    post:
      tags:
        - Authentication
      summary: Register a new customer
      description: Initiates customer registration by storing details and sending a verification email.
      operationId: registerCustomer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterCustomerRequest'
            examples:
              validCustomer:
                summary: Valid customer registration
                value:
                  name: Ahmed Mohamed
                  email: ahmed@example.com
                  mobileNumber: 01234567890
                  password: SecurePass123
      responses:
        '201':
          description: Customer registration initiated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Registration successful. Please check your email for verification link.
          headers:
            Set-Cookie:
              schema:
                type: string
                example: accessToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; HttpOnly; Secure; SameSite=Strict; Path=/; Max-Age=86400
        '400':
          $ref: '#/components/responses/BadRequestError'
  /api/auth/register/restaurant-owner:
    post:
      tags:
        - Authentication
      summary: Register a new restaurant owner
      description: Initiates restaurant owner registration by storing details and sending a verification email.
      operationId: registerRestaurantOwner
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRestaurantOwnerRequest'
            examples:
              validOwner:
                summary: Valid restaurant owner registration
                value:
                  restaurantName: Tasty Bites
                  organizationNumber: ORG123456
                  email: owner@example.com
                  mobileNumber: 09876543210
                  password: SecurePass123
      responses:
        '201':
          description: Restaurant owner registration initiated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Restaurant owner registration successful. Please check your email for verification link.
          headers:
            Set-Cookie:
              schema:
                type: string
                example: accessToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; HttpOnly; Secure; SameSite=Strict; Path=/; Max-Age=86400
        '400':
          $ref: '#/components/responses/BadRequestError'
  /api/auth/login/customer:
    post:
      tags:
        - Authentication
      summary: Customer login
      description: Authenticate a customer using email and password. Returns JWT tokens as HTTP-only cookies.
      operationId: loginCustomer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              loginWithEmail:
                summary: Login with email
                value:
                  email: ahmed@example.com
                  password: SecurePass123
      responses:
        '200':
          description: Customer login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Customer login successful
          headers:
            Set-Cookie:
              schema:
                type: string
                example: accessToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; HttpOnly; Secure; SameSite=Strict; Path=/; Max-Age=86400
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
  /api/auth/login/restaurant-owner:
    post:
      tags:
        - Authentication
      summary: Restaurant owner login
      description: Authenticate a restaurant owner using email and password. Returns JWT tokens as HTTP-only cookies.
      operationId: loginRestaurantOwner
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              loginWithEmail:
                summary: Login with email
                value:
                  email: owner@example.com
                  password: SecurePass123
      responses:
        '200':
          description: Restaurant owner login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Restaurant owner login successful
                  data:
                    type: object
                    properties:
                      is_active:
                        type: boolean
                        description: Whether the restaurant owner account is active and approved by admin
                        example: true
          headers:
            Set-Cookie:
              schema:
                type: string
                example: accessToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; HttpOnly; Secure; SameSite=Strict; Path=/; Max-Age=86400
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
  /api/auth/verify:
    get:
      tags:
        - Authentication
      summary: Verify email address
      description: Verifies a user's email using a token sent in the verification email.
      operationId: verifyEmail
      parameters:
        - in: query
          name: token
          schema:
            type: string
            format: uuid
          required: true
          description: Verification token sent to the user's email
          example: 550e8400-e29b-41d4-a716-446655440000
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Email verified successfully. You can now login.
                  data:
                    type: object
                    properties:
                      user:
                        oneOf:
                          - $ref: '#/components/schemas/CustomerResponse'
                          - $ref: '#/components/schemas/RestaurantOwnerResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
  /api/auth/profile/customer:
    get:
      tags:
        - Authentication
      summary: Get customer profile
      description: Retrieve the customer profile information for the authenticated customer
      operationId: getCustomerProfile
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Customer profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      userId:
                        type: string
                        format: uuid
                        example: 123e4567-e89b-12d3-a456-426614174000
                      name:
                        type: string
                        example: Ahmed Mohamed
                      profileImageUrl:
                        type: string
                        nullable: true
                        example: 'https://yum-gott-profile-images.s3.us-east-1.amazonaws.com/customer/123.jpg'
                      isActive:
                        type: boolean
                        description: Whether the customer account is active
                        example: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      tags:
        - Authentication
      summary: Update customer profile
      description: |
        Update the authenticated customer's profile information.

        **Note:** To change your profile image, use the `POST /api/auth/profile/image` endpoint to upload a new image. The `profileImageUrl` field in this endpoint's request body is ignored and should not be set directly.
      operationId: updateCustomerProfile
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Ahmed Mohamed
                email:
                  type: string
                  example: ahmed@example.com
                mobileNumber:
                  type: string
                  example: '+201234567890'
                about:
                  type: string
                  example: I love food and tech.
                gender:
                  type: string
                  enum:
                    - male
                    - female
                  example: male
                  description: 'Gender. Must be selected from the dropdown: ''male'' or ''female''.'
                profileImageUrl:
                  type: string
                  example: 'https://yum-gott-profile-images.s3.us-east-1.amazonaws.com/customer/123.jpg'
      responses:
        '200':
          description: Customer profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/CustomerResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/auth/profile/restaurant-owner:
    get:
      tags:
        - Authentication
      summary: Get restaurant owner profile
      description: 'Retrieve the restaurant name, profile image URL, and active status for the authenticated restaurant owner'
      operationId: getRestaurantOwnerProfile
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Restaurant owner profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      restaurantName:
                        type: string
                        example: Gourmet Delight
                      profileImageUrl:
                        type: string
                        nullable: true
                        example: 'https://yum-gott-profile-images.s3.us-east-1.amazonaws.com/restaurant_owner/123.jpg'
                      isActive:
                        type: boolean
                        description: Whether the restaurant owner account is active and approved by admin
                        example: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /api/auth/profile/image:
    post:
      tags:
        - Authentication
      summary: Upload profile image
      description: 'Allows authenticated customers or restaurant owners to upload a profile image, stored in AWS S3.'
      operationId: uploadProfileImage
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                profileImage:
                  type: string
                  format: binary
              required:
                - profileImage
      responses:
        '200':
          description: Profile image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Profile image uploaded successfully
                  data:
                    type: object
                    properties:
                      profileImageUrl:
                        type: string
                        example: 'https://yum-gott-profile-images.s3.us-east-1.amazonaws.com/customer/123.jpg'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /api/auth/location/restaurant:
    post:
      tags:
        - Authentication
      summary: Update restaurant location
      description: Allows authenticated restaurant owners to update their restaurant's address and coordinates.
      operationId: updateRestaurantLocation
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRestaurantLocationRequest'
      responses:
        '200':
          description: Restaurant location updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Restaurant location updated successfully
                  data:
                    type: object
                    properties:
                      address:
                        type: string
                        example: '123 Food Street, City'
                      latitude:
                        type: number
                        example: 40.7128
                      longitude:
                        type: number
                        example: -74.006
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /api/auth/refresh-token:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: |
        Refreshes the access token using the refresh token provided in the HTTP-only cookie.
        This endpoint should be called when the access token is expired or about to expire.
        The request must include the `refreshToken` and `accessToken` cookies.
      operationId: refreshToken
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Token refreshed successfully. New tokens are set in HTTP-only cookies.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Token refreshed successfully
          headers:
            Set-Cookie:
              schema:
                type: string
                example: accessToken=...; refreshToken=...;
        '401':
          description: 'Unauthorized. The refresh token is invalid, expired, or not provided.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Invalid or expired refresh token
  /api/auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      description: Invalidates the refresh token and clears authentication cookies.
      operationId: logout
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Logout successful
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /api/auth/change-password:
    post:
      tags:
        - Authentication
      summary: Change password
      description: Allows an authenticated user (customer or restaurant owner) to change their password.
      operationId: changePassword
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
            examples:
              changePasswordExample:
                summary: Change password with confirmation
                value:
                  oldPassword: CurrentP@ss1
                  newPassword: NewP@ssw0rd1
                  confirmPassword: NewP@ssw0rd1
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Password changed successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /api/auth/account/customer:
    delete:
      tags:
        - Authentication
      summary: Delete customer account
      description: |
        Allows authenticated customers to delete their own account permanently.
        This action cannot be undone and will remove all customer data.
        Only customers can access this endpoint.
      operationId: deleteCustomerAccount
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        '200':
          description: Customer account deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Customer account deleted successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/auth/account/restaurant-owner:
    delete:
      tags:
        - Authentication
      summary: Delete restaurant owner account
      description: |
        Allows authenticated restaurant owners to delete their own account permanently.
        This action cannot be undone and will remove all restaurant owner data.
        Only restaurant owners can access this endpoint.
      operationId: deleteRestaurantOwnerAccount
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        '200':
          description: Restaurant owner account deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Restaurant owner account deleted successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/products:
    post:
      tags:
        - Products
      summary: Create a new product
      description: Creates a new product for a restaurant owner.
      operationId: createProduct
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                categoryName:
                  type: string
                  description: 'Name of the category. If the category does not exist, it will be created automatically.'
                  example: Main Course
                productName:
                  type: string
                  description: Name of the product
                  example: Margherita Pizza
                description:
                  type: string
                  description: Product description
                  example: Classic pizza with tomato sauce and mozzarella
                price:
                  type: number
                  description: Base price of the product
                  example: 100
                discount:
                  type: number
                  description: Discount percentage
                  example: 10
                sizeOptions:
                  type: object
                  description: 'Optional array of size options. In multipart/form-data, must be a JSON string (e.g., ''[{"name":"Medium","additionalPrice":50},{"name":"Large","additionalPrice":70}]'').'
                  example: '[{"name":"Medium","additionalPrice":50},{"name":"Large","additionalPrice":70}]'
                image:
                  type: string
                  format: binary
                  description: Product image file (JPEG or PNG)
                options:
                  type: object
                  description: |
                    Optional array of product options (as JSON string). Each option can include name, required, and values (array of {name, additionalPrice}). Do NOT send id when creating new options/values; it will be generated automatically.
                  example: '[{"name":"Toppings","required":true,"values":[{"name":"Extra Cheese","additionalPrice":2.5}]}]'
              required:
                - categoryName
                - productName
                - description
                - price
                - image
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Product created successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Invalid input
  /api/products/restaurant:
    get:
      tags:
        - Products
      summary: Get all products for a restaurant
      description: Retrieves all products belonging to the authenticated restaurant owner.
      operationId: getProductsByRestaurant
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Get All Products successfully
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProductResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  '/api/products/{id}':
    get:
      tags:
        - Products
      summary: Get a product by ID
      description: Retrieves a specific product by its ID.
      operationId: getProduct
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: The ID of the product to retrieve
          example: 550e8400-e29b-41d4-a716-446655440000
      responses:
        '200':
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Get Product successfully
                  data:
                    $ref: '#/components/schemas/ProductResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      tags:
        - Products
      summary: Update a product
      description: Updates an existing product for a restaurant owner.
      operationId: updateProduct
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                categoryName:
                  type: string
                  description: 'Name of the category. If the category does not exist, it will be created automatically.'
                  example: Main Course
                productName:
                  type: string
                  description: Name of the product
                  example: Margherita Pizza
                description:
                  type: string
                  description: Product description
                  example: Classic pizza with tomato sauce and mozzarella
                price:
                  type: number
                  description: Base price of the product
                  example: 100
                discount:
                  type: number
                  description: Discount percentage
                  example: 10
                sizeOptions:
                  type: object
                  description: 'Optional array of size options. In multipart/form-data, must be a JSON string (e.g., ''[{"name":"Medium","additionalPrice":50},{"name":"Large","additionalPrice":70}]'').'
                  example: '[{"name":"Medium","additionalPrice":50},{"name":"Large","additionalPrice":70}]'
                image:
                  type: string
                  format: binary
                  description: Product image file (JPEG or PNG)
                options:
                  type: object
                  description: |
                    Optional array of product options (as JSON string). Each option can include name, required, and values (array of {name, additionalPrice}). Do NOT send id when creating new options/values; it will be generated automatically.
                  example: '[{"name":"Toppings","required":true,"values":[{"name":"Extra Cheese","additionalPrice":2.5}]}]'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Product updated successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Invalid input
    delete:
      tags:
        - Products
      summary: Delete a product
      description: Allows authenticated restaurant owners to delete a product.
      operationId: deleteProduct
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: The ID of the product to delete
          example: 550e8400-e29b-41d4-a716-446655440000
      responses:
        '200':
          description: Product deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Product deleted successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  '/api/products/{productId}/options':
    post:
      tags:
        - Product Options
      summary: Create a product option
      description: Allows authenticated restaurant owners to create a new option for a product.
      operationId: createProductOption
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: productId
          schema:
            type: string
            format: uuid
          required: true
          description: The ID of the product to add an option to
          example: 550e8400-e29b-41d4-a716-446655440000
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Toppings
              required:
                - name
      responses:
        '201':
          description: Product option created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Product option created successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    get:
      tags:
        - Product Options
      summary: Get product options
      description: Retrieves all options and their values for a specific product.
      operationId: getProductOptions
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: productId
          schema:
            type: string
            format: uuid
          required: true
          description: The ID of the product to retrieve options for
          example: 550e8400-e29b-41d4-a716-446655440000
      responses:
        '200':
          description: Product options retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Product options retrieved successfully
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          example: Toppings
                        values:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                example: Extra Cheese
                              additionalPrice:
                                type: number
                                example: 2.5
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  '/api/products/options/{optionId}':
    delete:
      tags:
        - Product Options
      summary: Delete a product option
      description: Allows authenticated restaurant owners to delete a product option and its associated values.
      operationId: deleteProductOption
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: optionId
          schema:
            type: string
            format: uuid
          required: true
          description: The ID of the option to delete
          example: 550e8400-e29b-41d4-a716-446655440000
      responses:
        '200':
          description: Product option deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Product option deleted successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  '/api/products/option-values/{valueId}':
    delete:
      tags:
        - Product Options
      summary: Delete a product option value
      description: Allows authenticated restaurant owners to delete a product option value.
      operationId: deleteProductOptionValue
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: valueId
          schema:
            type: string
            format: uuid
          required: true
          description: The ID of the option value to delete
          example: 550e8400-e29b-41d4-a716-446655440000
      responses:
        '200':
          description: Product option value deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Product option value deleted successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  '/api/products/options/{optionId}/values':
    post:
      tags:
        - Product Options
      summary: Create a product option value
      description: Allows authenticated restaurant owners to create a new value for a product option.
      operationId: createProductOptionValue
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: optionId
          schema:
            type: string
            format: uuid
          required: true
          description: The ID of the option to add a value to
          example: 550e8400-e29b-41d4-a716-446655440000
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Extra Cheese
                additionalPrice:
                  type: number
                  example: 2.5
              required:
                - name
      responses:
        '201':
          description: Product option value created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Product option value created successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /api/categories:
    post:
      tags:
        - Categories
      summary: Create a new category
      description: Allows restaurant owners to create a new category for their products.
      operationId: createCategory
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  maxLength: 100
                  example: Main Course
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Category created successfully
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        example: 550e8400-e29b-41d4-a716-446655440000
                      name:
                        type: string
                        example: Main Course
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /api/categories/restaurant:
    get:
      tags:
        - Categories
      summary: Get all categories for a restaurant
      description: Retrieves all categories belonging to the authenticated restaurant owner.
      operationId: getCategoriesByRestaurant
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Categories retrieved successfully
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                          example: 550e8400-e29b-41d4-a716-446655440000
                        name:
                          type: string
                          example: Main Course
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /api/opening-hours:
    post:
      tags:
        - Opening Hours
      summary: Create opening hours for a restaurant
      description: 'Allows restaurant owners to define one or more Working_hours per day (e.g., morning and evening shifts) in a single request.'
      operationId: createOpeningHours
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - day
                - isClosed
                - Working_hours
              properties:
                day:
                  type: string
                  enum:
                    - Monday
                    - Tuesday
                    - Wednesday
                    - Thursday
                    - Friday
                    - Saturday
                    - Sunday
                  example: Monday
                Working_hours:
                  type: array
                  items:
                    type: object
                    properties:
                      startTime:
                        type: string
                        format: time
                        example: '08:00:00'
                      endTime:
                        type: string
                        format: time
                        example: '12:00:00'
                  example:
                    - startTime: '08:00:00'
                      endTime: '12:00:00'
                    - startTime: '14:00:00'
                      endTime: '18:00:00'
                isClosed:
                  type: boolean
                  example: false
            examples:
              multipleWorkingHours:
                summary: Multiple working hours in one request
                value:
                  day: Monday
                  Working_hours:
                    - startTime: '08:00:00'
                      endTime: '12:00:00'
                    - startTime: '14:00:00'
                      endTime: '18:00:00'
                  isClosed: false
      responses:
        '201':
          description: Opening hours created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Opening hours created successfully
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      restaurantOwnerId:
                        type: string
                        format: uuid
                      day:
                        type: string
                        example: Monday
                      Working_hours:
                        type: array
                        items:
                          type: object
                          properties:
                            startTime:
                              type: string
                              format: time
                              example: '08:00:00'
                            endTime:
                              type: string
                              format: time
                              example: '12:00:00'
                        example:
                          - startTime: '08:00:00'
                            endTime: '12:00:00'
                          - startTime: '14:00:00'
                            endTime: '18:00:00'
                      isClosed:
                        type: boolean
                        example: false
                      createdAt:
                        type: string
                        format: date-time
                      updatedAt:
                        type: string
                        format: date-time
        '400':
          description: Bad request
        '403':
          description: Forbidden
  /api/opening-hours/restaurant:
    get:
      tags:
        - Opening Hours
      summary: Get opening hours for a restaurant
      description: Retrieves all opening hours for the authenticated restaurant owner. Each day will have an array of Working_hours.
      operationId: getOpeningHours
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Opening hours retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Opening hours retrieved successfully
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        restaurantOwnerId:
                          type: string
                          format: uuid
                        day:
                          type: string
                          example: Monday
                        Working_hours:
                          type: array
                          items:
                            type: object
                            properties:
                              startTime:
                                type: string
                                format: time
                                example: '08:00:00'
                              endTime:
                                type: string
                                format: time
                                example: '12:00:00'
                          example:
                            - startTime: '08:00:00'
                              endTime: '12:00:00'
                            - startTime: '14:00:00'
                              endTime: '18:00:00'
                        isClosed:
                          type: boolean
                          example: false
                        createdAt:
                          type: string
                          format: date-time
                        updatedAt:
                          type: string
                          format: date-time
              examples:
                multipleWorkingHours:
                  summary: Multiple working hours for the same day
                  value:
                    success: true
                    message: Opening hours retrieved successfully
                    data:
                      - id: uuid-1
                        restaurantOwnerId: uuid-owner
                        day: Monday
                        Working_hours:
                          - startTime: '08:00:00'
                            endTime: '12:00:00'
                          - startTime: '14:00:00'
                            endTime: '18:00:00'
                        isClosed: false
                        createdAt: '2025-01-01T00:00:00Z'
                        updatedAt: '2025-01-01T00:00:00Z'
        '400':
          description: Bad request
        '403':
          description: Forbidden
  '/api/opening-hours/{id}':
    delete:
      tags:
        - Opening Hours
      summary: Delete a working hour entry
      description: Deletes a working hour entry by its id. Only the restaurant owner can delete their own entries.
      operationId: deleteOpeningHours
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the working hour entry to delete
      responses:
        '200':
          description: Opening hours deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Opening hours deleted successfully
        '400':
          description: Bad request
        '403':
          description: Forbidden
        '404':
          description: Not found
    put:
      tags:
        - Opening Hours
      summary: Update opening hours
      description: Updates an existing opening hours entry for a restaurant owner.
      operationId: updateOpeningHours
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the opening hours entry to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                day:
                  type: string
                  enum:
                    - Monday
                    - Tuesday
                    - Wednesday
                    - Thursday
                    - Friday
                    - Saturday
                    - Sunday
                  example: Monday
                Working_hours:
                  type: array
                  items:
                    type: object
                    properties:
                      startTime:
                        type: string
                        format: time
                        example: '08:00:00'
                      endTime:
                        type: string
                        format: time
                        example: '12:00:00'
                  example:
                    - startTime: '08:00:00'
                      endTime: '12:00:00'
                    - startTime: '14:00:00'
                      endTime: '18:00:00'
                isClosed:
                  type: boolean
                  example: false
            examples:
              updateExample:
                summary: Update opening hours for a day
                value:
                  day: Monday
                  Working_hours:
                    - startTime: '09:00:00'
                      endTime: '13:00:00'
                  isClosed: false
      responses:
        '200':
          description: Opening hours updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Opening hours updated successfully
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      restaurantOwnerId:
                        type: string
                        format: uuid
                      day:
                        type: string
                        example: Monday
                      Working_hours:
                        type: array
                        items:
                          type: object
                          properties:
                            startTime:
                              type: string
                              format: time
                              example: '09:00:00'
                            endTime:
                              type: string
                              format: time
                              example: '13:00:00'
                        example:
                          - startTime: '09:00:00'
                            endTime: '13:00:00'
                      isClosed:
                        type: boolean
                        example: false
                      createdAt:
                        type: string
                        format: date-time
                      updatedAt:
                        type: string
                        format: date-time
        '400':
          description: Bad request
        '403':
          description: Forbidden
        '404':
          description: Not found
  /api/videos:
    post:
      summary: Create a new video
      tags:
        - Videos
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                publicId:
                  type: string
                  description: Public ID of the video
                  example: yum_gott/videos/yum_gott_1752456506674
                secureUrl:
                  type: string
                  format: uri
                  description: Secure URL of the video
                  example: 'https://res.cloudinary.com/dbipfyr2o/video/upload/v1752456506674/yum_gott/videos/yum_gott_1752456506674.mp4'
                restaurantName:
                  type: string
                  description: Name of the restaurant
                  example: Falafel Ala Kefk
                phoneNumber:
                  type: string
                  description: Phone number associated with the video
                  example: '2054353'
                network:
                  type: string
                  enum:
                    - MTN
                    - Syriatel
                  description: Network provider
                  example: MTN
                invoiceImage:
                  type: string
                  format: binary
                  description: Invoice image file (JPEG or PNG)
                  example: invoice.jpg
              required:
                - publicId
                - secureUrl
                - restaurantName
                - phoneNumber
                - network
                - invoiceImage
      responses:
        '201':
          description: Video created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Video created successfully
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      userId:
                        type: string
                        format: uuid
                      publicId:
                        type: string
                      secureUrl:
                        type: string
                        format: uri
                      restaurantName:
                        type: string
                      phoneNumber:
                        type: string
                      network:
                        type: string
                        enum:
                          - MTN
                          - Syriatel
                      invoiceImage:
                        type: string
                        format: uri
                      statusVideo:
                        type: string
                        enum:
                          - pending
                          - rejected
                          - accepted
                      likesCount:
                        type: integer
                        description: Number of likes on the video
                        example: 42
                      createdAt:
                        type: string
                        format: date-time
                      updatedAt:
                        type: string
                        format: date-time
                    required:
                      - id
                      - userId
                      - publicId
                      - secureUrl
                      - restaurantName
                      - phoneNumber
                      - network
                      - invoiceImage
                      - statusVideo
                      - likesCount
                      - createdAt
                      - updatedAt
        '400':
          description: Bad request (validation error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized (invalid or missing token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (only customers can create videos)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/videos/{id}':
    put:
      summary: Update an existing video
      tags:
        - Videos
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the video to update
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                publicId:
                  type: string
                  description: Public ID of the video
                  example: yum_gott/videos/yum_gott_1752456506674
                secureUrl:
                  type: string
                  format: uri
                  description: Secure URL of the video
                  example: 'https://res.cloudinary.com/dbipfyr2o/video/upload/v1752456506674/yum_gott/videos/yum_gott_1752456506674.mp4'
                restaurantName:
                  type: string
                  description: Name of the restaurant
                  example: Falafel Ala Kefk
                phoneNumber:
                  type: string
                  description: Phone number associated with the video
                  example: '2054353'
                network:
                  type: string
                  enum:
                    - MTN
                    - Syriatel
                  description: Network provider
                  example: MTN
                invoiceImage:
                  type: string
                  format: binary
                  description: 'Invoice image file (JPEG or PNG, optional)'
                  example: invoice.jpg
              required:
                - publicId
                - secureUrl
                - restaurantName
                - phoneNumber
                - network
      responses:
        '200':
          description: Video updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Video updated successfully
                  data:
                    $ref: '#/components/schemas/Video'
        '400':
          description: Bad request (validation error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized (invalid or missing token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (only customers can update videos)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Video not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete a video
      tags:
        - Videos
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the video to delete
      responses:
        '200':
          description: Video deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Video deleted successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized (invalid or missing token)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                required:
                  - success
                  - message
        '403':
          description: Forbidden (only customers can delete videos)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Video not found
          content:
            application/json:
              schema:
                $ref: '#/paths/~1api~1videos~1%7Bid%7D/delete/responses/401/content/application~1json/schema'
  /api/videos/accepted:
    get:
      summary: Get all accepted videos for the authenticated customer
      tags:
        - Videos
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Customer accepted videos retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Customer accepted videos retrieved successfully
                  data:
                    type: object
                    properties:
                      videos:
                        type: array
                        items:
                          $ref: '#/components/schemas/Video'
                    required:
                      - videos
                required:
                  - success
                  - message
                  - data
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized (invalid or missing token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (only customers can access their videos)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/videos/customer/accepted:
    get:
      summary: Get all videos with accepted status (with pagination)
      tags:
        - Videos
      security:
        - cookieAuth: []
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of videos to return per page
          example: 10
        - in: query
          name: cursor
          schema:
            type: string
            format: date-time
          description: Cursor for pagination (ISO 8601 date format)
          example: '2024-01-15T10:30:00.000Z'
      responses:
        '200':
          description: Accepted videos retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedVideosResponse'
        '400':
          description: Bad request (validation error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized (invalid or missing token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/videos/feed:
    get:
      summary: Get video feed after user's last seen video
      tags:
        - Videos
      parameters:
        - in: query
          name: user_id
          required: true
          schema:
            type: string
            format: uuid
          description: User's unique identifier (UUID)
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            default: 10
            maximum: 50
          description: Number of videos to return
        - in: query
          name: cursor
          required: false
          schema:
            type: string
            format: uuid
          description: Pagination cursor for next page. Use the `next_cursor` value returned from the previous response (UUID of the last item).
      responses:
        '200':
          description: List of videos after last seen
          content:
            application/json:
              schema:
                type: object
                properties:
                  videos:
                    type: array
                    items:
                      $ref: '#/components/schemas/Video'
                  next_cursor:
                    type: string
                    format: uuid
                    description: Use this value as the `cursor` on the next request
                  has_more:
                    type: boolean
        '400':
          description: Bad request
        '404':
          description: User not found
  /api/videos/update-position:
    post:
      summary: Update user's last seen video
      tags:
        - Videos
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  format: uuid
                last_video_id:
                  type: string
                  format: uuid
              required:
                - user_id
                - last_video_id
      responses:
        '200':
          description: Position updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          description: Bad request
        '404':
          description: User or video not found
  /api/comments:
    post:
      tags:
        - Comments
      summary: Create a new comment on a video
      description: Creates a new comment on a video. Requires authentication.
      operationId: createComment
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                videoId:
                  type: string
                  format: uuid
                  description: ID of the video to comment on
                  example: 123e4567-e89b-12d3-a456-426614174000
                content:
                  type: string
                  description: Comment content
                  minLength: 1
                  maxLength: 1000
                  example: Great video! The food looks amazing.
              required:
                - videoId
                - content
      responses:
        '201':
          description: Comment created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Comment created successfully
                  data:
                    $ref: '#/components/schemas/Comment'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Video not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/comments/video/{videoId}':
    get:
      tags:
        - Comments
      summary: Get all comments for a video
      description: Retrieves all comments for a specific video. This is a public endpoint.
      operationId: getVideoComments
      parameters:
        - name: videoId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the video
          example: 123e4567-e89b-12d3-a456-426614174000
      responses:
        '200':
          description: Comments retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Comments retrieved successfully
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
        '404':
          description: Video not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/comments/{id}':
    delete:
      tags:
        - Comments
      summary: Delete a comment
      description: Deletes a comment. Users can only delete their own comments. Requires authentication.
      operationId: deleteComment
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the comment to delete
          example: 123e4567-e89b-12d3-a456-426614174001
      responses:
        '200':
          description: Comment deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Comment deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - User can only delete their own comments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Comment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/likes/toggle:
    post:
      tags:
        - Likes
      summary: Toggle like on a video
      description: 'Toggles the like status on a video. If not liked, adds a like. If already liked, removes the like. Requires authentication.'
      operationId: toggleVideoLike
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                videoId:
                  type: string
                  format: uuid
                  description: ID of the video to like/unlike
                  example: 123e4567-e89b-12d3-a456-426614174000
              required:
                - videoId
      responses:
        '200':
          description: Like status toggled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Video liked successfully
                  data:
                    type: object
                    properties:
                      isLiked:
                        type: boolean
                        description: Whether the video is currently liked by the user
                        example: true
                      likesCount:
                        type: integer
                        description: Total number of likes on the video
                        example: 43
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Video not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/likes/video/{videoId}':
    get:
      tags:
        - Likes
      summary: Get likes for a video
      description: Retrieves all likes for a specific video. This is a public endpoint.
      operationId: getVideoLikes
      parameters:
        - name: videoId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the video
          example: 123e4567-e89b-12d3-a456-426614174000
      responses:
        '200':
          description: Video likes retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Video likes retrieved successfully
                  data:
                    type: object
                    properties:
                      likes:
                        type: array
                        items:
                          $ref: '#/components/schemas/Like'
                      totalCount:
                        type: integer
                        description: Total number of likes
                        example: 42
        '404':
          description: Video not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/payGate:
    get:
      tags:
        - PayGate
      summary: List active pay gates
      description: Returns all active payment gateways as an array of strings.
      operationId: listPayGates
      responses:
        '200':
          description: Active pay gates retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Active pay gates
                  data:
                    type: array
                    items:
                      type: string
                      example: PAYMENT_X
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/orders:
    post:
      summary: Create a new order
      tags:
        - Orders
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                customerId:
                  type: string
                productId:
                  type: string
                orderDate:
                  type: string
                  format: date-time
                status:
                  type: string
                  enum:
                    - pending
                    - paid
                    - shipped
                    - completed
                    - cancelled
                createdAt:
                  type: string
                  format: date-time
                updatedAt:
                  type: string
                  format: date-time
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/paths/~1api~1orders/post/requestBody/content/application~1json/schema'
    get:
      summary: Get all orders for the authenticated customer
      tags:
        - Orders
      security:
        - cookieAuth: []
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/paths/~1api~1orders/post/requestBody/content/application~1json/schema'
  '/api/orders/{orderId}':
    get:
      summary: Get order by ID
      tags:
        - Orders
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/paths/~1api~1orders/post/requestBody/content/application~1json/schema'
components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: accessToken
  schemas:
    RegisterCustomerRequest:
      type: object
      properties:
        name:
          type: string
          example: Ahmed Mohamed
        email:
          type: string
          example: ahmed@example.com
        mobileNumber:
          type: string
          example: 01234567890
        password:
          type: string
          example: SecurePass123
      required:
        - name
        - email
        - mobileNumber
        - password
    RegisterRestaurantOwnerRequest:
      type: object
      properties:
        restaurantName:
          type: string
          example: Tasty Bites
        organizationNumber:
          type: string
          example: 01234ORG567
        email:
          type: string
          example: owner@example.com
        mobileNumber:
          type: string
          example: 01234567890
        password:
          type: string
          example: SecurePass123
      required:
        - restaurantName
        - organizationNumber
        - email
        - mobileNumber
        - password
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          example: user@example.com
        password:
          type: string
          example: SecurePass123
      required:
        - email
        - password
    UpdateRestaurantLocationRequest:
      type: object
      properties:
        address:
          type: string
          example: '123 Main St, Cairo'
        latitude:
          type: number
          example: 30.0444
        longitude:
          type: number
          example: 31.2357
      required:
        - address
        - latitude
        - longitude
    ChangePasswordRequest:
      type: object
      properties:
        oldPassword:
          type: string
          minLength: 6
          example: CurrentP@ss1
        newPassword:
          type: string
          minLength: 6
          description: 'Must contain at least one lowercase letter, one uppercase letter, and one number'
          example: NewP@ssw0rd1
        confirmPassword:
          type: string
          minLength: 6
          example: NewP@ssw0rd1
      required:
        - oldPassword
        - newPassword
        - confirmPassword
    RestaurantOwner:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        restaurantName:
          type: string
          example: Tasty Bites
        organizationNumber:
          type: string
          example: 01234ORG567
        email:
          type: string
          example: owner@example.com
        mobileNumber:
          type: string
          example: 01234567890
        isEmailVerified:
          type: boolean
          example: true
        address:
          type: string
          example: '123 Main St, Cairo'
        latitude:
          type: number
          example: 30.0444
        longitude:
          type: number
          example: 31.2357
        createdAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00Z'
    AuthToken:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        refreshToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        expiresIn:
          type: number
          example: 86400
    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          example: Main Dishes
        restaurantId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174001
        createdAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00Z'
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          example: Chicken Shawarma
        description:
          type: string
          example: Delicious chicken shawarma with garlic sauce
        price:
          type: number
          example: 50
        discount:
          type: number
          example: 10
        imageUrl:
          type: string
          example: 'https://example.com/image.jpg'
        categoryId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174001
        restaurantId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174002
        createdAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00Z'
    CreateCategoryRequest:
      type: object
      properties:
        name:
          type: string
          example: Main Dishes
      required:
        - name
    CreateProductRequest:
      type: object
      properties:
        categoryName:
          type: string
          example: Main Dishes
        productName:
          type: string
          example: Chicken Shawarma
        description:
          type: string
          example: Delicious chicken shawarma with garlic sauce
        price:
          type: number
          example: 50
        discount:
          type: number
          example: 10
        sizeOptions:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                enum:
                  - Small
                  - Medium
                  - Large
              additionalPrice:
                type: number
                example: 0
        image:
          type: string
          format: binary
        options:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: Toppings
              required:
                type: boolean
                example: false
              values:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: Extra Cheese
                    additionalPrice:
                      type: number
                      example: 5
      required:
        - categoryName
        - productName
        - description
        - price
        - image
    UpdateProductRequest:
      type: object
      properties:
        categoryName:
          type: string
          example: Main Dishes
        productName:
          type: string
          example: Chicken Shawarma
        description:
          type: string
          example: Updated description
        price:
          type: number
          example: 55
        discount:
          type: number
          example: 15
        sizeOptions:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                enum:
                  - Small
                  - Medium
                  - Large
              additionalPrice:
                type: number
                example: 0
        image:
          type: string
          format: binary
        options:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: Toppings
              required:
                type: boolean
                example: false
              values:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: Extra Cheese
                    additionalPrice:
                      type: number
                      example: 5
      required:
        - categoryName
        - productName
        - description
        - price
        - image
    ProductOption:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          example: Toppings
        required:
          type: boolean
          example: false
        productId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174001
        createdAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00Z'
    ProductOptionValue:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          example: Extra Cheese
        additionalPrice:
          type: number
          example: 5
        optionId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174001
        createdAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00Z'
    CreateProductOptionRequest:
      type: object
      properties:
        name:
          type: string
          example: Toppings
        required:
          type: boolean
          example: false
      required:
        - name
        - required
    CreateProductOptionValueRequest:
      type: object
      properties:
        name:
          type: string
          example: Extra Cheese
        additionalPrice:
          type: number
          example: 5
      required:
        - name
        - additionalPrice
    CustomerResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          example: Ahmed Mohamed
        email:
          type: string
          example: ahmed@example.com
        mobileNumber:
          type: string
          example: 01234567890
        isEmailVerified:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00Z'
    RestaurantOwnerResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        restaurantName:
          type: string
          example: Tasty Bites
        organizationNumber:
          type: string
          example: 01234ORG567
        email:
          type: string
          example: owner@example.com
        mobileNumber:
          type: string
          example: 01234567890
        isEmailVerified:
          type: boolean
          example: true
        address:
          type: string
          example: '123 Main St, Cairo'
        latitude:
          type: number
          example: 30.0444
        longitude:
          type: number
          example: 31.2357
        createdAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00Z'
    ProductResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          example: Chicken Shawarma
        description:
          type: string
          example: Delicious chicken shawarma with garlic sauce
        price:
          type: number
          example: 50
        discount:
          type: number
          example: 10
        imageUrl:
          type: string
          example: 'https://example.com/image.jpg'
        categoryId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174001
        restaurantId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174002
        categoryName:
          type: string
          example: Main Dishes
        options:
          type: array
          items:
            $ref: '#/components/schemas/ProductOptionWithValue'
        createdAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00Z'
    ProductOptionWithValue:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          example: Toppings
        required:
          type: boolean
          example: false
        productId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174001
        values:
          type: array
          items:
            $ref: '#/components/schemas/ProductOptionValue'
        createdAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00Z'
    Comment:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        content:
          type: string
          example: Great video! The food looks delicious.
        videoId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174001
        userId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174002
        userType:
          type: string
          enum:
            - customer
            - restaurant_owner
          example: customer
        userName:
          type: string
          description: Display name of the commenter (customer name or restaurant name)
          example: John Doe
        createdAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00Z'
      required:
        - id
        - content
        - videoId
        - userId
        - userType
        - createdAt
        - updatedAt
    Like:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        videoId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174001
        userId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174002
        userType:
          type: string
          enum:
            - customer
            - restaurant_owner
          example: customer
        createdAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00Z'
      required:
        - id
        - videoId
        - userId
        - userType
        - createdAt
    PayGate:
      type: object
      properties:
        gateName:
          type: string
          example: PAYMENT_X
      required:
        - gateName
    CreateCommentRequest:
      type: object
      properties:
        videoId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174001
        content:
          type: string
          example: Great video! The food looks delicious.
      required:
        - videoId
        - content
    ToggleLikeRequest:
      type: object
      properties:
        videoId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174001
      required:
        - videoId
    Video:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        userId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174001
        publicId:
          type: string
          example: video_123
        secureUrl:
          type: string
          format: uri
          example: 'https://example.com/video.mp4'
        restaurantName:
          type: string
          example: Tasty Bites
        phoneNumber:
          type: string
          example: 01234567890
        network:
          type: string
          enum:
            - MTN
            - Syriatel
          example: MTN
        invoiceImage:
          type: string
          format: uri
          example: 'https://example.com/invoice.jpg'
        statusVideo:
          type: string
          enum:
            - pending
            - rejected
            - accepted
          example: accepted
        likesCount:
          type: integer
          description: Number of likes on the video
          example: 42
        createdAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00Z'
      required:
        - id
        - userId
        - publicId
        - secureUrl
        - restaurantName
        - phoneNumber
        - network
        - invoiceImage
        - statusVideo
        - likesCount
        - createdAt
        - updatedAt
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: An error occurred
      required:
        - success
        - message
    VideosResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Videos retrieved successfully
        data:
          type: array
          items:
            $ref: '#/components/schemas/Video'
      required:
        - success
        - message
        - data
    PaginatedVideosResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Videos retrieved successfully
        data:
          type: object
          properties:
            videos:
              type: array
              items:
                $ref: '#/components/schemas/Video'
            pagination:
              type: object
              properties:
                nextCursor:
                  type: string
                  format: date-time
                  nullable: true
                  description: Cursor for the next page
                  example: '2024-01-15T10:30:00.000Z'
                hasMore:
                  type: boolean
                  description: Whether there are more videos to fetch
                  example: true
              required:
                - hasMore
          required:
            - videos
            - pagination
      required:
        - success
        - message
        - data
  responses:
    BadRequestError:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Bad request
    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Unauthorized
    ForbiddenError:
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Forbidden
    NotFoundError:
      description: Not found
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Not found
    TooManyRequestsError:
      description: Too many requests
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: 'Too many requests, please try again later'
              retryAfter:
                type: number
                description: Number of seconds to wait before making another request
                example: 60
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Internal server error
