paths:
  /orders:
    post:
      summary: Create a new order
      tags:
        - Orders
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

    get:
      summary: Get all orders for the authenticated customer
      tags:
        - Orders
      security:
        - cookieAuth: []
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'

  /orders/{orderId}:
    get:
      summary: Get order by ID
      tags:
        - Orders
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

components:
  schemas:
    CreateOrderRequest:
      type: object
      required:
        - customerId
        - productId
      properties:
        customerId:
          type: string
          description: The ID of the customer placing the order.
          example: "123e4567-e89b-12d3-a456-426614174000"
        productId:
          type: string
          description: The ID of the product being ordered.
          example: "550e8400-e29b-41d4-a716-446655440000"
    Order:
      type: object
      properties:
        customerId:
          type: string
        product:
          $ref: '#/components/schemas/ProductWithOptionsAndValues'
        orderDate:
          type: string
          format: date-time
        status:
          type: string
          enum: [pending, paid, shipped, completed, cancelled]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    ProductWithOptionsAndValues:
      type: object
      properties:
        product:
          $ref: '#/components/schemas/Product'
        options:
          type: array
          items:
            type: object
            properties:
              option:
                $ref: '#/components/schemas/ProductOption'
              values:
                type: array
                items:
                  $ref: '#/components/schemas/ProductOptionValue'
    Product:
      type: object
      properties:
        categoryName:
          type: string
        productName:
          type: string
        description:
          type: string
        price:
          type: number
        discount:
          type: number
        sizeOptions:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              additionalPrice:
                type: number
        restaurantOwnerId:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    ProductOption:
      type: object
      properties:
        name:
          type: string
        required:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    ProductOptionValue:
      type: object
      properties:
        name:
          type: string
        additionalPrice:
          type: number
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
 